# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - pre-test
  - build
  - test
  - deploy

cache:
  key: npm
  policy: pull-push
  paths:
    - .npm/

# Add environment here!
before_script:
  - echo REACT_APP_AUTH0_DOMAIN=${REACT_APP_AUTH0_DOMAIN} >> .env   
  - echo REACT_APP_API_SERVER_URL=${REACT_APP_API_SERVER_URL} >> .env         
  - echo REACT_APP_AUTH0_CLIENT_ID=${REACT_APP_AUTH0_CLIENT_ID} >> .env
  - echo REACT_APP_AUTH0_CALLBACK_URL=${REACT_APP_AUTH0_CALLBACK_URL} >> .env

react-test: 
  stage: pre-test
  script:
    - npm ci --cache .npm --prefer-offline
    - npm test

sonarqube-check:
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  stage: pre-test
  script: 
    - echo sonar.token=${SONAR_TOKEN} >> sonar-project.properties
    - sonar-scanner
  allow_failure: true

build-docker:
  stage: build
  script:
    - docker build -t nhnam123/chatsapp-frontend:v1 .

build-react:
  stage: build
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run build
  artifacts:
    paths:
      - build/

jmeter-load-tests:
  stage: test
  script:
    - $container_id = docker run -d -p 85:80 --env-file .env nhnam123/chatsapp-frontend:v1
    - jmeter -n -t "ChatsApp-group.jmx" -l "jmeter-report.csv" -e -o "jmeter-dashboard"
    - docker rm -f $container_id
  artifacts:
    paths:
      - jmeter-report.csv
      - jmeter-dashboard/

zap-dast-tests:
  stage: test
  script:
    - $container_id = docker run -d -p 85:80 --env-file .env nhnam123/chatsapp-frontend:v1
    - java -Xmx512m -jar "C:\Program Files\ZAP\Zed Attack Proxy\zap-2.15.0.jar" -cmd -silent -quickurl http://localhost:85/ -quickout ./zapReport-frontend.html -quickprogress
    - docker rm -f $container_id
  artifacts:
    paths:
      - zapReport-frontend.html

deploy-to-Azure-static-web:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - npm ci --cache .npm --prefer-offline
    - npx swa deploy ./build --deployment-token ${DEPLOYMENT_TOKEN}
  dependencies:
    - build-react
  only:
    - main